library("MASS")
library("cmdstanr")
install.packages('cmdstanr')
install.packages('cmdstanr')
install.package("cmdstanr")
install.packages('cmdstanr')
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library("MASS")
library("cmdstanr")
install_cmdstan()
library("MASS")
library("cmdstanr")
# setwd(paste("C:/Users/ezequ/OneDrive - Fundacao Getulio Vargas - FGV/Mentoria/",
"joint-models-in-stan", sep = ""))
sim_data <- function(N,
lambda,
rho_s,
cens_time,
beta,
gamma,
var_u,
var_z,
rho,
n_rep_obs){
times <- id <- long_out <- x_total <- vector()
beta_11 <- beta[1]
beta_12 <- beta[2]
beta_13 <- beta[3]
beta_21 <- beta[4]
gamma_1 <- gamma[1]
gamma_2 <- gamma[2]
gamma_3 <- gamma[3]
mu_u1 <- 0
mu_u2 <- 0
mu_u <- c(mu_u1,mu_u2)
var_u1 <- var_u[1]
var_u2 <- var_u[2]
var_u3 <- var_u[3]
sigma <- matrix(c(var_u1, sqrt(var_u1*var_u2)*rho,
sqrt(var_u1*var_u2)*rho, var_u2), 2)
bvn_u <- mvrnorm(N, mu = mu_u, Sigma = sigma)
u_1 <- bvn_u[,1]
u_2 <- bvn_u[,2]
u_3 <- rnorm(N, 0, sqrt(var_u3))
x <- rnorm(N, 0, 1)
###################
# Survival process
###################
# Simulating the times to event
v <- runif(N)
id_times <- c(1:N)
for(i in 1:N){
haz <- function(s) {
lres <- log(lambda) + log(rho_s) + (rho_s-1)*log(s) + beta_21*x[i] +
gamma_1*u_1[i] + gamma_2*u_2[i] + gamma_3*(u_1[i] + u_2[i]*s) +
u_3[i]
return(exp(lres))
}
cum_haz <- function(t) {
res <- integrate(haz, 0, t)$value
return(res)
}
sv <- function(t) (exp(-cum_haz(t)) - v[i])^2
times[i] <- optim(1, sv, lower = 1e-6, upper = Inf, method = "L-BFGS-B")$par
}
status <- as.vector(times < cens_time)
times <- as.vector(ifelse(status, times, cens_time))
status <- as.numeric(status) # Censoring indicators (1=Observed, 0=Censored)
##############################
# Longitudinal process
##############################
obs_times_out <- vector()
for(i in 1:N){
# number of repeated observations for each individual
obs_times <- seq(0, times[i], by = n_rep_obs)
x_t <- rep(x[i], length(obs_times))
x_total <- c(x_total, x_t)
z = rnorm(length(obs_times), 0, sqrt(var_z))
y_t <- beta_11 + beta_12*obs_times + beta_13*rep(x[i], length(obs_times)) +
rep(u_1[i], length(obs_times)) + rep(u_2[i], length(obs_times))*
obs_times + z
long_out <- c(long_out, y_t)
id <- c(id,rep(i, length(obs_times)))
obs_times_out <- c(obs_times_out, obs_times)
}
#---------------------------------------------------------------------
# Creating the longitudinal and survival processes object
#---------------------------------------------------------------------
N <- length(id_times)                # number of subjects
n_obs <- length(long_out)            # total number of observations
x <- as.matrix(x,1)                  # unique x
obs_times <- obs_times_out           # visit times for repeated observations
y <- long_out                        # longitudinal outcomes
ind_unc_times <- which(status==1)    # uncensored times indicator
n_unc_times <- length(ind_unc_times) # number of uncensored times
long_data <- list(y=y,
N=N,
n_obs=n_obs,
x=x,
id=id,
obs_times=obs_times)
event_data <- list(N=N,
x=x,
times=times,
ind_unc_times=ind_unc_times,
n_unc_times=n_unc_times)
joint_data <- list(N=N,
n_obs=n_obs,
y=y,
id=id,
obs_times=obs_times,
x=x,
times=times,
ind_unc_times=ind_unc_times,
n_unc_times=n_unc_times)
save(long_data, file = "data/long_data.RData")
save(event_data, file = "data/event_data.RData")
save(joint_data, file = "data/joint_data.RData")
}
View(sim_data)
set.seed(25072023)
setwd(paste("C:/Users/ezequ/OneDrive - Fundacao Getulio Vargas - FGV/Mentoria/",
"joint-models-in-stan", sep = ""))
setwd(paste("C:/Documents/Graduacao/FGV/IC/joint-models-in-stan/",
"joint-models-in-stan", sep = ""))
# Configurar o diretório de trabalho e carregar os dados
setwd("/home/kalil/Documents/Graduacao/FGV/ME/modelagem_estatistica_a2")
data <- read.csv("seven_wonders_duel.csv")
var <- colnames(data)
# Se a variável dependente 'Sucesso' não for binária, você pode precisar transformá-la. Supondo que 'Sucesso' é binária (0 ou 1)
data$Sucesso <- as.factor(data$Sucesso)  # Certificar que é um fator binário
data$Exército <- as.factor(data$Exército)
# Carregar as variáveis selecionadas de um arquivo CSV
variaveis_selecionadas <- read.csv("variaveis_selecionadas_com_interacoes.csv")
# Converter o dataframe em um vetor de variáveis
selected_vars <- as.vector(variaveis_selecionadas$Variaveis)
AICc <- function(model) {
k <- length(coefficients(model))
n <- length(data$Sucesso)
AIC(model) + 2 * k * (k + 1) / (n - k - 1)
}
# Criar a fórmula para o modelo
formula <- as.formula(paste("Sucesso ~", paste(selected_vars, collapse = " + ")))
print(formula)
# Ajustar modelo logit
model_logit <- glm(formula, data = data, family = binomial)
summary(model_logit)
print(summary(model_logit))
print("AICc do modelo logit:")
print(AICc(model_logit))
# Ajustar modelo probit
model_probit <- glm(formula, data = data, family = binomial(link = "probit"))
summary(model_probit)
print(summary(model_probit))
print("AICc do modelo probit:")
print(AICc(model_probit))
# Obtenha o coeficiente do modelo Probit
coef_probit <- coef(model_probit)
# Multiplicar os coeficientes Probit por 1.6 para obter os equivalentes Logit
coef_logit_equivalente <- coef_probit * 1.6
# Calcular a probabilidade associada a cada coeficiente Probit
prob_probit_equivalente <- pnorm(coef_probit)
# Calcular a probabilidade associada a cada coeficiente logit equivalente
prob_logit_equivalente <- pnorm(coef_logit_equivalente)
# Crie a nova tabela com os parâmetros na escala dos dados
param_table <- data.frame(
Coeficiente_Probit = coef_probit,
Probabilidade_Probit_Equivalente = prob_probit_equivalente
)
print(param_table)
# Calcular os valores médios de cada variável do modelo
mean_guilda <- mean(as.numeric(data$Guilda), na.rm = TRUE)
mean_ciencia <- mean(as.numeric(data$Ciência), na.rm = TRUE)
mean_dinheiro <- mean(as.numeric(data$Dinheiro), na.rm = TRUE)
# Calcular o valor de Z médio usando os coeficientes Probit
z_mean_probit <- coef_probit["(Intercept)"] +
coef_probit["Guilda"] * mean_guilda +
coef_probit["Ciência"] * mean_ciencia +
coef_probit["Dinheiro"] * mean_dinheiro +
coef_probit["Dinheiro:Ciência"] * (mean_dinheiro * mean_ciencia)
# Calcular o valor de Z médio usando os coeficientes Logit equivalentes
z_mean_logit_equivalente <- coef_logit_equivalente["(Intercept)"] +
coef_logit_equivalente["Guilda"] * mean_guilda +
coef_logit_equivalente["Ciência"] * mean_ciencia +
coef_logit_equivalente["Dinheiro"] * mean_dinheiro +
coef_logit_equivalente["Dinheiro:Ciência"] * (mean_dinheiro * mean_ciencia)
# Converter Z para probabilidade usando a função de distribuição cumulativa normal (Probit)
prob_sucesso_media_probit <- pnorm(z_mean_probit)
# Converter Z para probabilidade usando a função de distribuição cumulativa logística (Logit)
prob_sucesso_media_logit <- plogis(z_mean_logit_equivalente)
# Exibir as probabilidades médias de sucesso
print(paste("A probabilidade média de sucesso (Probit) é de", round(prob_sucesso_media_probit * 100, 2), "%"))
print(paste("A probabilidade média de sucesso (Logit Equivalente) é de", round(prob_sucesso_media_logit * 100, 2), "%"))
# Calcular o impacto das variáveis na probabilidade de sucesso (derivadas)
deriv_guilda <- coef_logit_equivalente["Guilda"] * dlogis(z_mean_logit_equivalente)
deriv_ciencia <- (coef_logit_equivalente["Ciência"] + coef_logit_equivalente["Dinheiro:Ciência"] * mean_dinheiro) * dlogis(z_mean_logit_equivalente)
deriv_dinheiro <- (coef_logit_equivalente["Dinheiro"] + coef_logit_equivalente["Dinheiro:Ciência"] * mean_ciencia) * dlogis(z_mean_logit_equivalente)
deriv_interacao <- coef_logit_equivalente["Dinheiro:Ciência"] * (mean_ciencia + mean_dinheiro) * dlogis(z_mean_logit_equivalente)
# Criar a tabela de impacto das variáveis
impact_table <- data.frame(
Variável = c("Guilda", "Ciência", "Dinheiro", "Dinheiro:Ciência"),
Derivada_Logit_Equivalente = c(deriv_guilda, deriv_ciencia, deriv_dinheiro, deriv_interacao),
Prob_Sucesso_Media_Probit = prob_sucesso_media_probit,
Prob_Sucesso_Media_Logit = prob_sucesso_media_logit
)
print(impact_table)
# Configurar o diretório de trabalho e carregar os dados
setwd("/home/kalil/Documents/Graduacao/FGV/ME/modelagem_estatistica_a2")
data <- read.csv("seven_wonders_duel.csv")
var <- colnames(data)
# Se a variável dependente 'Sucesso' não for binária, você pode precisar transformá-la. Supondo que 'Sucesso' é binária (0 ou 1)
data$Sucesso <- as.factor(data$Sucesso)  # Certificar que é um fator binário
data$Exército <- as.factor(data$Exército)
# Carregar as variáveis selecionadas de um arquivo CSV
variaveis_selecionadas <- read.csv("variaveis_selecionadas_com_interacoes.csv")
# Converter o dataframe em um vetor de variáveis
selected_vars <- as.vector(variaveis_selecionadas$Variaveis)
AICc <- function(model) {
k <- length(coefficients(model))
n <- length(data$Sucesso)
AIC(model) + 2 * k * (k + 1) / (n - k - 1)
}
# Criar a fórmula para o modelo
formula <- as.formula(paste("Sucesso ~", paste(selected_vars, collapse = " + ")))
print(formula)
# Ajustar modelo logit
model_logit <- glm(formula, data = data, family = binomial)
summary(model_logit)
print(summary(model_logit))
print("AICc do modelo logit:")
print(AICc(model_logit))
# Ajustar modelo probit
model_probit <- glm(formula, data = data, family = binomial(link = "probit"))
summary(model_probit)
print(summary(model_probit))
print("AICc do modelo probit:")
print(AICc(model_probit))
# Obtenha o coeficiente do modelo Probit
coef_probit <- coef(model_probit)
# Multiplicar os coeficientes Probit por 1.6 para obter os equivalentes Logit
coef_logit_equivalente <- coef_probit * 1.6
# Calcular a probabilidade associada a cada coeficiente Probit
prob_probit_equivalente <- pnorm(coef_probit)
# Calcular a probabilidade associada a cada coeficiente logit equivalente
prob_logit_equivalente <- pnorm(coef_logit_equivalente)
# Crie a nova tabela com os parâmetros na escala dos dados
param_table <- data.frame(
Coeficiente_Probit = coef_probit[c("(Intercept)", "Exército2", "Exército5", "Exército10")],
Probabilidade_Probit_Equivalente = prob_probit_equivalente[c("(Intercept)", "Exército2", "Exército5", "Exército10")]
)
print(param_table)
# Calcular os valores médios de cada variável do modelo
mean_guilda <- mean(as.numeric(data$Guilda), na.rm = TRUE)
mean_ciencia <- mean(as.numeric(data$Ciência), na.rm = TRUE)
mean_dinheiro <- mean(as.numeric(data$Dinheiro), na.rm = TRUE)
# Calcular o valor de Z médio usando os coeficientes Probit
z_mean_probit <- coef_probit["(Intercept)"] +
coef_probit["Guilda"] * mean_guilda +
coef_probit["Ciência"] * mean_ciencia +
coef_probit["Dinheiro"] * mean_dinheiro +
coef_probit["Dinheiro:Ciência"] * (mean_dinheiro * mean_ciencia)
# Calcular o valor de Z médio usando os coeficientes Logit equivalentes
z_mean_logit_equivalente <- coef_logit_equivalente["(Intercept)"] +
coef_logit_equivalente["Guilda"] * mean_guilda +
coef_logit_equivalente["Ciência"] * mean_ciencia +
coef_logit_equivalente["Dinheiro"] * mean_dinheiro +
coef_logit_equivalente["Dinheiro:Ciência"] * (mean_dinheiro * mean_ciencia)
# Converter Z para probabilidade usando a função de distribuição cumulativa normal (Probit)
prob_sucesso_media_probit <- pnorm(z_mean_probit)
# Converter Z para probabilidade usando a função de distribuição cumulativa logística (Logit)
prob_sucesso_media_logit <- plogis(z_mean_logit_equivalente)
# Exibir as probabilidades médias de sucesso
print(paste("A probabilidade média de sucesso (Probit) é de", round(prob_sucesso_media_probit * 100, 2), "%"))
print(paste("A probabilidade média de sucesso (Logit Equivalente) é de", round(prob_sucesso_media_logit * 100, 2), "%"))
# Calcular o impacto das variáveis na probabilidade de sucesso (derivadas)
deriv_guilda <- coef_logit_equivalente["Guilda"] * dlogis(z_mean_logit_equivalente)
deriv_ciencia <- (coef_logit_equivalente["Ciência"] + coef_logit_equivalente["Dinheiro:Ciência"] * mean_dinheiro) * dlogis(z_mean_logit_equivalente)
deriv_dinheiro <- (coef_logit_equivalente["Dinheiro"] + coef_logit_equivalente["Dinheiro:Ciência"] * mean_ciencia) * dlogis(z_mean_logit_equivalente)
deriv_interacao <- coef_logit_equivalente["Dinheiro:Ciência"] * (mean_ciencia + mean_dinheiro) * dlogis(z_mean_logit_equivalente)
# Criar a tabela de impacto das variáveis
impact_table <- data.frame(
Variável = c("Guilda", "Ciência", "Dinheiro", "Dinheiro:Ciência"),
Derivada_Logit_Equivalente = c(deriv_guilda, deriv_ciencia, deriv_dinheiro, deriv_interacao),
Prob_Sucesso_Media_Probit = prob_sucesso_media_probit,
Prob_Sucesso_Media_Logit = prob_sucesso_media_logit
)
print(impact_table)
